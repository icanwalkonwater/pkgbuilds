#!/usr/bin/env nu

use std/assert

def "main print-data" [] {
  collect-filesystem-db | explore
}

def main [--quiet (-q)] {
  print "Collecting problematic files data..."
  let db = collect-filesystem-db
  print $"Found (ansi defb)($db | length)(ansi reset) problematic entries"

  let missing_package_files = $db | where package != null and present == false
  print $"Found (ansi defb)($missing_package_files | length)(ansi reset) missing package files"
  if not $quiet and ($missing_package_files | length) > 0 {
    echo $missing_package_files | explore
  }

  let unowned_dirs = $db
    | where package == null and present == true and type == "dir"

  print $"Found (ansi defb)($unowned_dirs | length)(ansi reset) unowned dirs"
  if not $quiet and ($unowned_dirs | length) > 0 {
    echo $unowned_dirs | explore
  }

  let unowned_files = $db | where package == null and present == true and type != "dir"
  print $"Found (ansi defb)($unowned_files | length)(ansi reset) unowned files"
  if not $quiet and ($unowned_files | length) > 0 {
    echo $unowned_files | explore
  }
}

def collect-filesystem-db []: nothing -> table<file: string, package: string, present: bool, type: string> {
  let package_files = ^pacman -Ql
    | lines
    | parse '{package} {file}'
    | update file {|| trim-path}

  let system_files = ^find -P / -xdev
    | lines
    | trim-path
    | uniq
    | where {|| ($in | str length) > 0}
    | wrap file

  $package_files
    | join --outer $system_files file
    | insert present {|| $in.file | path exists}
    | insert type {|| $in.file | path type}
    | insert modified false
    | where {|| $in.package == null or not $in.present or $in.modified} # Problematic files
    | ignore-list # Known problematic file to just ignore
    | move --first file
}

def ignore-list [] {
  $in
    | ignore-mime
    | ignore-root
    | ignore-ca-certificates
    | ignore-pacman-keys
    | ignore-icon-cache
    | ignore-kernel-modules-cache
}

def ignore-mime [] {
  # Ignore mime types, they are generated by a pacman hook
  $in
    # Dirs
    | where file !~ "^/usr/share/mime/(inode|text|application|model|video|font|image|audio|multipart|x-content|message|chemical|x-epoc)(/.+)?$"
    # Individual files
    | where {|r| not ($r.type == "file" and $r.file =~ "^/usr/share/mime/(globs|globs2|magic|XMLnamespaces|subclasses|aliases|types|generic-icons|icons|treemagic|version|mime\\.cache)$")}
}

def ignore-root [] {
  # Root home dir is inconsequential
  $in | where file !~ "^/root(/.+)?$"
}

def ignore-ca-certificates [] {
  # SSL Certificates are all over the place
  $in
    | where file !~ "^/etc/ca-certificates/extracted/cadir(/.+)?$"
    | where file !~ "^/etc/ca-certificates/extracted/(tls-ca-bundle.pem|email-ca-bundle.pem|objsign-ca-bundle.pem|edk2-cacerts.bin|java-cacerts.jks)(/.+)?$"
    | where file !~ "^/etc/ssl/certs/[0-9a-f]{8}\\.0$"
    | where file !~ "^/etc/ssl/certs/[a-zA-Z0-9_.-]+\\.pem$"
    | where {|r| not ($r.type == "symlink" and $r.file == "/etc/ssl/certs/java/cacerts")}
}

def ignore-pacman-keys [] {
  $in | where file !~ "^/etc/pacman.d/gnupg(/.+)?$"
}

def ignore-icon-cache [] {
  $in | where {|r| not ($r.type == "file" and $r.file =~ "^/usr/share/icons/[a-zA-Z0-9_-]+/icon-theme.cache$")}
}

def ignore-kernel-modules-cache [] {
  $in
    | where {|r| not (
        $r.type == "file"
        and $r.file =~ "^/usr/lib/modules/" + (^uname -r) + "/modules\\.(dep|dep\\.bin|alias|alias\\.bin|softdep|weakdep|symbols|symbols\\.bin|builtin\\.bin|builtin\\.alias\\.bin|devname)$"
    )}
}

def trim-path [] {
  str trim --right --char '/'
}
